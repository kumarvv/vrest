{"name":"vREST","tagline":"Single Class REST Server using Java SE ","body":"vREST\r\n=====\r\n\r\nSimple single class REST server using Java SE only.\r\n\r\n- Jave SE 1.6 or above \r\n- No HTTP server / servlet container required \r\n- Uses Java SE socket to listen and process client requests\r\n- Multi-threaded request processing (100 threads by default)\r\n- Uses jackson mapper (org.codehaus.jackson) for JSON processing\r\n- Automatic scanning of all REST resources in current classpath (no configurations required)\r\n\r\n<strong>Limitations:</strong> \r\n- Not a production ready server (for quick REST services testing only) \r\n- supports JSON data communications only \r\n\r\nSetup\r\n-----\r\n\r\nDownload or checkout and run following maven command: \r\n\r\n```bash\r\n$ mvn compile\r\n$ mvn exec:exec -DRESTServer\r\n```\r\n\r\nThis command should scan all the classes in current directory for REST resources and listens on 4001 port: \r\n\r\n```bash\r\n$ mvn exec:exec -DRESTServer\r\n[INFO] Scanning for projects...\r\n...\r\n[INFO] --- exec-maven-plugin:1.3.2:exec (default-cli) @ vjrest ---\r\nINFO: scanning resources...\r\nINFO: Found api: CityResource.delete => /cities/:city\r\nINFO: Found api: CityResource.all => /cities\r\nINFO: Found api: CityResource.create => /cities/new\r\nINFO: Found api: CityResource.update => /cities/:city\r\nINFO: Found api: CityResource.getCity => /cities/:city\r\nINFO: Found api: CityResource.echo => /echo/:str\r\nINFO: Found api: CityResource.getRequestParams => /params\r\nINFO: scanning completed.\r\nINFO: starting server...\r\nINFO: listening on http://localhost:4001\r\n\r\n```\r\n\r\nUsage: \r\n------\r\n\r\nImport static properties from RESTServer class and add <code>@Resource</code> annotation with path to any POJO (or non-POJO) classes: \r\n\r\n```java \r\nimport static com.kumarvv.vrest.RESTServer.*;\r\n\r\n@Resource(\"/cities\")\r\npublic class CityResource {\r\n...\r\n```\r\n\r\nAdd <code>@GET</code> (or <code>@POST, @PUT, @UPDATE</code>) annotation to the class method. This annotation also supports resource path to append to class resource path. \r\n\r\n```java \r\n@GET\r\npublic Map<String, City> all() {\r\n...\r\n\r\n@GET(\"favorties\")  // resolves to \"/cities/favorites\"\r\npublic Map<String, City> favorites() {\r\n\treturn cities;\r\n}\r\n```\r\n\r\nAdd <code>@Param</code> to inject request or url parameter value to method arguments: \r\n\r\n```java\r\n@GET(\":city\")\r\npublic City getCity(@Param(\"city\") String cityCode) {\r\n\treturn cities.get(cityCode);\r\n}\r\n```\r\n\r\nRequest using <code>/cities/NYC</code> url will pass the <code>NYC</code> value to <code>cityCode</code> method argument. \r\nAdd <code>@Data</code> to inject request payload (form-data) to method argument: \r\n\r\n```java\r\n@PUT(\":city\")\r\npublic City update(@Param(\"city\") String cityCode, @Data City upd) {\r\n\tCity city = cities.get(cityCode);\r\n...\r\n```\r\n\r\n\r\nSample REST Resource class: \r\n---------------------------\r\n\r\n```java\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport static com.kumarvv.vrest.RESTServer.*;\r\n\r\n/**\r\n * Sample request with full CRUD\r\n */\r\n@Resource(\"/cities\")\r\npublic class CityResource {\r\n\r\n\tprivate static Map<String, City> cities;\r\n\tstatic {\r\n\t\tcities = new HashMap<String, City>();\r\n\t\tcities.put(\"NYC\", new City(\"NYC\", \"New York\"));\r\n\t\tcities.put(\"LAX\", new City(\"LAX\", \"Los Angeles\"));\r\n\t\tcities.put(\"SFO\", new City(\"SFO\", \"San Francisco\"));\r\n\t\tcities.put(\"BOS\", new City(\"BOS\", \"Boston\"));\r\n\t}\r\n\r\n\t@GET\r\n\tpublic Map<String, City> all() {\r\n\t\treturn cities;\r\n\t}\r\n\r\n\t@GET(\":city\")\r\n\tpublic City getCity(@Param(\"city\") String cityCode) {\r\n\t\treturn cities.get(cityCode);\r\n\t}\r\n\r\n\t@POST(\"new\")\r\n\tpublic City create(@Data City city) {\r\n\t\tcity.setCreatedAt(new Date());\r\n\t\tcities.put(city.getCode(), city);\r\n\t\treturn city;\r\n\t}\r\n\r\n\t@PUT(\":city\")\r\n\tpublic City update(@Param(\"city\") String cityCode, @Data City upd) {\r\n\t\tCity city = cities.get(cityCode);\r\n\t\tif (city != null) {\r\n\t\t\tcity.setName(upd.getName());\r\n\t\t\tcity.setUpdatedAt(new Date());\r\n\t\t\tcities.put(city.getCode(), city);\r\n\t\t\treturn city;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t@DELETE(\":city\")\r\n\tpublic String delete(@Param(\"city\") String cityCode) {\r\n\t\tcities.remove(cityCode);\r\n\t\treturn \"City [\" + cityCode + \"] deleted successfully\";\r\n\t}\r\n\r\n\t@GET(\"/echo/:str\")\r\n\tpublic String echo(@Param(\"str\") String str) {\r\n\t\treturn \"echo: \" + str;\r\n\t}\r\n\r\n\t@GET(\"/params\")\r\n\tpublic Map<String, String> getRequestParams(@Params Map<String, String> params) {\r\n\t\treturn params;\r\n\t}\r\n}\r\n```\r\n\r\nThis class generates REST resources in following context paths: \r\n```\r\nGET /cities          => maps to CityResource.all() \r\nGET /cities/:city    => maps to CityResource.getCity()\r\nPOST /cities/new     => maps to CityResource.create() \r\nPUT /cities/:city    => maps to CityResource.update() \r\nDELETE /cities/:city => maps to CityResource.delete() \r\nGET /echo/:str       => maps to CityResource.echo() \r\nGET /params          => maps to CityResource.getRequestParams()\r\n```\r\nNote on <code>/echo/:str</code>, starting with <code>/</code> in <code>@GET(\"/echo/:str\")</code> makes the resource to be at root bypassing the <code>@Resource</code> annotation at class level. All other resources have <code>/cities</code> as prefix from <code>@Resource</code> annotation. \r\n\r\n\r\nSample Request/Response: \r\n--------------\r\n\r\nGET request of <code>http://localhost:4001/cities/NYC</code> will return following json: \r\n```json\r\n{\r\n    \"code\": \"NYC\",\r\n    \"name\": \"New York\",\r\n    \"created\": \"Sun Jul 18 13:24:12 EDT 2014\",\r\n    \"updated\": \"Sun Jul 18 13:24:34 EDT 2014\"\r\n}\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}